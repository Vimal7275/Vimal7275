[10/11, 4:58 PM] +91 6374 502 697: def fact_rec(n):
     if n==0 or n==1:
        return 1
     else:
        return n*fact_rec(n-1)

number = 2
res = fact_rec(number)

print("The factorial of {} is {}.".format(number,res
[10/11, 4:58 PM] +91 6374 502 697: def  isLeapYear(year):
     if (year % 4 == 0 and year % 100 != 0) or year % 400 == 0:
        return True
     else:
        return False

year = int(input("enter a year :"))

if isLeapYear(year):
  print('{} is a leap year.'.format(year))
else:
  print('{} is not a leap year.'.format(year))
[10/11, 4:58 PM] +91 6374 502 697: class BankAccount:
    def __init__(self, account_number, account_holder_name, initial_balance=0.0):
        self.__account_number = account_number
        self.__account_holder_name = account_holder_name
        self.__account_balance = initial_balance

    def deposit(self, amount):
        if amount > 0:
            self.__account_balance += amount
            print(f"Deposited ${amount:.2f} into account {self.__account_number}")
        else:
            print("Invalid deposit amount. Please deposit a positive amount.")

    def withdraw(self, amount):
        if amount > 0:
            if self.__account_balance >= amount:
                self.__account_balance -= amount
                print(f"Withdrew ${amount:.2f} from account {self.__account_number}")
            else:
                print("Insufficient balance. Cannot withdraw.")
        else:
            print("Invalid withdrawal amount. Please withdraw a positive amount.")

    def display_balance(self):
        print(f"Account {self.__account_number} balance: ${self.__account_balance:.2f}")


# Testing the BankAccount class
if __name__ == "__main__":
    # Create a BankAccount instance
    account1 = BankAccount("123456", "John Doe", 1000.0)

    # Deposit money
    account1.deposit(500.0)

    # Withdraw money
    account1.withdraw(200.0)

    # Display balance
    account1.display_balance()
[10/11, 4:58 PM] +91 6374 502 697: # Define the Player class

class Player:

    def play(self):

        print("The player is playing cricket.")

# Define the Batsman class, derived from Player

class Batsman(Player):

    def play(self):

        print("The batsman is batting.")

# Define the Bowler class, derived from Player

class Bowler(Player):

    def play(self):

        print("The bowler is bowling.")

# Create objects of Batsman and Bowler classes

batsman = Batsman()

bowler = Bowler()

# Call the play() method for each object

batsman.play()

bowler.play()
[10/11, 4:58 PM] +91 6374 502 697: def linearSearchProduct(productList, targetProduct):
    indices = []

    for index, product in enumerate(productList):
        if product == targetProduct:
            indices.append(index)

    return indices

# Example usage:
products = ["shoes", "boot", "loafer", "shoes", "sandal", "shoes"]
target = "shoes"
result = linearSearchProduct(products, target)
print(result)
[10/11, 4:58 PM] +91 6374 502 697: class Student:

  def __init__(self, name, roll_number, cgpa):
    self.name = name
    self.roll_number = roll_number
    self.cgpa = cgpa

def sort_students(student_list):
  sorted_students = sorted(student_list, key=lambda student: student.cgpa, reverse=True)
  return sorted_students

students = [
  Student("Hari", "A123", 7.8),
  Student("Srikanth", "A124", 8.9),
  Student("Saumya", "A125", 9.1),
  Student("Mahidhar", "A126", 9.9),
]

sorted_students = sort_students(students)

for student in sorted_students:
  print("Name: {}, Roll_Number: {}, CGPA: {}".format(student.name, student.roll_number, student.cgpa))[10/11, 4:58 PM] +91 6374 502 697: def fact_rec(n):
     if n==0 or n==1:
        return 1
     else:
        return n*fact_rec(n-1)

number = 2
res = fact_rec(number)

print("The factorial of {} is {}.".format(number,res
[10/11, 4:58 PM] +91 6374 502 697: def  isLeapYear(year):
     if (year % 4 == 0 and year % 100 != 0) or year % 400 == 0:
        return True
     else:
        return False

year = int(input("enter a year :"))

if isLeapYear(year):
  print('{} is a leap year.'.format(year))
else:
  print('{} is not a leap year.'.format(year))
[10/11, 4:58 PM] +91 6374 502 697: class BankAccount:
    def __init__(self, account_number, account_holder_name, initial_balance=0.0):
        self.__account_number = account_number
        self.__account_holder_name = account_holder_name
        self.__account_balance = initial_balance

    def deposit(self, amount):
        if amount > 0:
            self.__account_balance += amount
            print(f"Deposited ${amount:.2f} into account {self.__account_number}")
        else:
            print("Invalid deposit amount. Please deposit a positive amount.")

    def withdraw(self, amount):
        if amount > 0:
            if self.__account_balance >= amount:
                self.__account_balance -= amount
                print(f"Withdrew ${amount:.2f} from account {self.__account_number}")
            else:
                print("Insufficient balance. Cannot withdraw.")
        else:
            print("Invalid withdrawal amount. Please withdraw a positive amount.")

    def display_balance(self):
        print(f"Account {self.__account_number} balance: ${self.__account_balance:.2f}")


# Testing the BankAccount class
if __name__ == "__main__":
    # Create a BankAccount instance
    account1 = BankAccount("123456", "John Doe", 1000.0)

    # Deposit money
    account1.deposit(500.0)

    # Withdraw money
    account1.withdraw(200.0)

    # Display balance
    account1.display_balance()
[10/11, 4:58 PM] +91 6374 502 697: # Define the Player class

class Player:

    def play(self):

        print("The player is playing cricket.")

# Define the Batsman class, derived from Player

class Batsman(Player):

    def play(self):

        print("The batsman is batting.")

# Define the Bowler class, derived from Player

class Bowler(Player):

    def play(self):

        print("The bowler is bowling.")

# Create objects of Batsman and Bowler classes

batsman = Batsman()

bowler = Bowler()

# Call the play() method for each object

batsman.play()

bowler.play()
[10/11, 4:58 PM] +91 6374 502 697: def linearSearchProduct(productList, targetProduct):
    indices = []

    for index, product in enumerate(productList):
        if product == targetProduct:
            indices.append(index)

    return indices

# Example usage:
products = ["shoes", "boot", "loafer", "shoes", "sandal", "shoes"]
target = "shoes"
result = linearSearchProduct(products, target)
print(result)
[10/11, 4:58 PM] +91 6374 502 697: class Student:

  def __init__(self, name, roll_number, cgpa):
    self.name = name
    self.roll_number = roll_number
    self.cgpa = cgpa

def sort_students(student_list):
  sorted_students = sorted(student_list, key=lambda student: student.cgpa, reverse=True)
  return sorted_students

students = [
  Student("Hari", "A123", 7.8),
  Student("Srikanth", "A124", 8.9),
  Student("Saumya", "A125", 9.1),
  Student("Mahidhar", "A126", 9.9),
]

sorted_students = sort_students(students)

for student in sorted_students:
  print("Name: {}, Roll_Number: {}, CGPA: {}".format(student.name, student.roll_number, student.cgpa))def linearSearchProduct(productList, targetProduct):
    indices = []

    for index, product in enumerate(productList):
        if product == targetProduct:
            indices.append(index)

    return indices

# Example usage:
products = ["shoes", "boot", "loafer", "shoes", "sandal", "shoes"]
target = "shoes"
result = linearSearchProduct(products, target)
print(result)
